<!-- ==============================
     Styles for UTYA Faces Section
     ============================== -->
<style>
  /* Ø§Ø³ØªØ§ÛŒÙ„ Ù¾Ø§ÛŒÙ‡ Ú¯Ù„Ø³ Ø¨Ø±Ø§ÛŒ Ù‡Ù…Ù‡ Ø¯Ú©Ù…Ù‡â€ŒÙ‡Ø§ÛŒ Ø¯Ø§Ø®Ù„ #utya-faces-section */
  #utya-faces-section a.glass-btn {
    display: inline-block;
    padding: 10px 20px;
    font-size: 16px;
    border-radius: 10px;
    background: rgba(255, 255, 255, 0.10);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: #fff;
    text-decoration: none;
    cursor: pointer;
    transition: transform 0.3s ease,
                background 0.3s ease,
                border-color 0.3s ease;
    backdrop-filter: blur(12px);
  }

  #utya-faces-section a.glass-btn:hover {
    transform: scale(1.05);
    background: rgba(255, 255, 255, 0.20);
    border-color: rgba(255, 255, 255, 0.3);
  }

  #utya-scroll {
    display: flex;
    overflow-x: auto;
    gap: 16px;
    padding-bottom: 12px;
    scroll-snap-type: x mandatory;
    -webkit-overflow-scrolling: touch;
    cursor: grab;
    user-select: none;
    scrollbar-width: none;        /* Firefox */
    -ms-overflow-style: none;     /* IE 10+ */
  }
  #utya-scroll::-webkit-scrollbar {
    display: none;                /* Chrome, Safari, Opera */
  }
  #utya-scroll.dragging {
    cursor: grabbing;
  }
  .face-card {
    flex: 0 0 auto;
    width: 140px;
    height: 140px;
    border-radius: 16px;
    overflow: hidden;
    scroll-snap-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .face-lottie {
    width: 100%;
    height: 100%;
    pointer-events: none;
    user-select: none;
  }
</style>

<!-- ==============================
     UTYA Faces Section (HTML)
     ============================== -->
<div id="utya-faces-section" style="
  backdrop-filter: blur(12px);
  background: rgba(255, 255, 255, 0.10);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 24px;
  margin: 60px auto;
  max-width: 1200px;
  color: white;
  text-align: center;
  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.35);
  font-family: 'Fredoka One', cursive, sans-serif;
  padding-bottom: 40px;
">
  <h2 style="font-size: 46px; margin-bottom: 18px; font-weight: 900; letter-spacing: 1.6px; padding: 0 40px;">
    One Duck, All Vibes
  </h2>

  <p style="font-size: 18px; max-width: 880px; margin: 0 auto 48px; line-height: 1.8; color: #FFD700; padding: 0 40px;">
    Utyaâ€™s got faces for every mood. Flex where it counts.
  </p>

  <div id="utya-scroll">
    <!-- UTYA Face Cards with Lottie -->
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(1).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(2).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(3).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(4).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(6).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(7).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(8).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(9).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(10).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(11).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(12).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(13).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(14).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(15).json"></div></div>
  </div>

  <!-- Buttons Section -->
  <div style="display: flex; justify-content: center; flex-wrap: wrap; gap: 16px; padding: 20px 0;">
    <a
      class="glass-btn"
      href="https://t.me/addstickers/p_teZm6FhyAgp6zEjovwu3_by_SigStick2Bot"
      target="_blank"
      rel="noopener noreferrer"
      onclick="document.getElementById('utyaSound').currentTime=0; document.getElementById('utyaSound').play();"
    >
      ðŸ¦† View UTYA Stickers
    </a>

    <a
      class="glass-btn"
      href="https://acrobat.adobe.com/id/urn:aaid:sc:US:f99eba4f-c50e-403a-8ded-c150488bf23f?viewer%21megaVerb=group-discover"
      target="_blank"
      rel="noopener noreferrer"
      onclick="document.getElementById('utyaSound').currentTime=0; document.getElementById('utyaSound').play();"
    >
      ðŸ“„ View Memepaper
    </a>
  </div>
</div>

<!-- ==============================
     Audio for Button Click
     ============================== -->
<audio id="utyaSound" src="/utya-sound.mp3" preload="auto"></audio>

<!-- ==============================
     Lottie & Scroll Scripts
     ============================== -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.12.2/lottie.min.js"></script>
<script>
  // Lazy load & control Lottie animations
  const faceLottieObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      const container = entry.target;
      if (entry.isIntersecting) {
        if (!container._lottie) {
          container._lottie = lottie.loadAnimation({
            container,
            renderer: 'svg',
            loop: true,
            autoplay: true,
            path: container.dataset.src
          });
        } else {
          container._lottie.play();
        }
      } else {
        container._lottie?.pause();
      }
    });
  }, { threshold: 0.4 });

  document.querySelectorAll('.face-lottie')
          .forEach(el => faceLottieObserver.observe(el));

  // Drag-to-scroll (modified to work on whole widget)
  const widgetContainer = document.getElementById('utya-faces-section');
  const faceScroll = document.getElementById('utya-scroll');
  
  let isDown = false, startX, scrollLeft;
  
  widgetContainer.addEventListener('mousedown', e => {
    if (e.target.closest('.glass-btn')) return; // Skip if clicking on buttons
    isDown = true;
    faceScroll.classList.add('dragging');
    startX = e.pageX - faceScroll.offsetLeft;
    scrollLeft = faceScroll.scrollLeft;
  });
  
  ['mouseleave','mouseup'].forEach(evt =>
    widgetContainer.addEventListener(evt, () => {
      isDown = false;
      faceScroll.classList.remove('dragging');
    })
  );
  
  widgetContainer.addEventListener('mousemove', e => {
    if (!isDown) return;
    e.preventDefault();
    const x = e.pageX - faceScroll.offsetLeft;
    faceScroll.scrollLeft = scrollLeft - (x - startX) * 1.5;
  });

  // Enhanced wheel scroll for whole widget
  widgetContainer.addEventListener('wheel', function(e) {
    // Only apply horizontal scroll on desktop
    if (window.innerWidth < 768) return;
    
    // Check if we're at the boundaries
    const atStart = faceScroll.scrollLeft <= 0;
    const atEnd = faceScroll.scrollLeft + faceScroll.offsetWidth >= faceScroll.scrollWidth - 1;
    
    // Determine scroll direction
    const isVerticalScroll = Math.abs(e.deltaY) > Math.abs(e.deltaX);
    
    if (isVerticalScroll) {
      // Prevent default vertical scroll only if we can scroll horizontally
      if ((e.deltaY < 0 && !atStart) || (e.deltaY > 0 && !atEnd)) {
        e.preventDefault();
        faceScroll.scrollLeft += e.deltaY * 1.2;
      }
    } else {
      // Allow native horizontal scrolling for trackpads
      return;
    }
  }, { passive: false });

  // Prevent button wheel events from bubbling up
  document.querySelectorAll('.glass-btn').forEach(btn => {
    btn.addEventListener('wheel', e => {
      e.stopPropagation();
    });
  });
</script>
