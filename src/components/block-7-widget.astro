<!-- UTYA Faces Section -->
<div id="utya-faces-section" style="
  backdrop-filter: blur(12px);
  background: rgba(255, 255, 255, 0.10);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 24px;
  margin: 60px auto;
  max-width: 1200px;
  color: white;
  text-align: center;
  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.35);
  font-family: 'Fredoka One', cursive, sans-serif;
  padding-bottom: 40px;
">
  <h2 style="font-size: 46px; margin-bottom: 18px; font-weight: 900; letter-spacing: 1.6px; padding: 0 40px;">
    The Many Faces of UTYA
  </h2>

  <p style="font-size: 18px; max-width: 880px; margin: 0 auto 48px auto; line-height: 1.8; color: #FFD700; padding: 0 40px;">
    Mood swings, meme vibes, pure duck energy. These faces aren't just expressions — they're the entire UTYA spectrum. Slide through the legendary looks that made UTYA a cult icon on-chain.
  </p>

  <div id="utya-scroll">
    <!-- UTYA Face Cards with Lottie -->
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(1).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(2).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(3).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(4).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(5).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(6).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(7).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(8).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(9).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(10).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(11).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(12).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(13).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(14).json"></div></div>
    <div class="face-card"><div class="face-lottie" data-src="/utya-sticker-(15).json"></div></div>
  </div>

  <!-- Buttons Section -->
  <div style="display: flex; justify-content: center; flex-wrap: wrap; gap: 16px; padding: 20px 0px">
    <a 
      href="https://t.me/addstickers/p_teZm6FhyAgp6zEjovwu3_by_SigStick2Bot" 
      target="_blank" 
      onclick="document.getElementById('utyaSound').currentTime=0; document.getElementById('utyaSound').play();" 
      style="
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 10px;
        background: white;
        color: #0ca0d9;
        text-decoration: none;
        cursor: pointer;
      "
    >
      🦆 View UTYA Stickers
    </a>

    <a 
      href="https://acrobat.adobe.com/id/urn:aaid:sc:US:f99eba4f-c50e-403a-8ded-c150488bf23f?viewer%21megaVerb=group-discover" 
      target="_blank" 
      onclick="document.getElementById('utyaSound').currentTime=0; document.getElementById('utyaSound').play();" 
      style="
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 10px;
        background: white;
        color: #0ca0d9;
        text-decoration: none;
        cursor: pointer;
      "
    >
      📄 View Memepaper
    </a>
  </div>
</div>

<!-- Styles -->
<style>
#utya-scroll {
  display: flex;
  overflow-x: auto;
  gap: 16px;
  padding: 0 0 12px 0;
  scroll-snap-type: x mandatory;
  -webkit-overflow-scrolling: touch;
  cursor: grab;
  user-select: none;
  scrollbar-width: none;
  -ms-overflow-style: none;
}
#utya-scroll::-webkit-scrollbar {
  display: none;
}
#utya-scroll.dragging {
  cursor: grabbing;
}
.face-card {
  flex: 0 0 auto;
  width: 140px;
  height: 140px;
  border-radius: 16px;
  overflow: hidden;
  scroll-snap-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
}
.face-lottie {
  width: 100%;
  height: 100%;
  pointer-events: none;
  user-select: none;
}
</style>

<!-- Audio -->
<audio id="utyaSound" src="/utya-sound.mp3" preload="auto"></audio>

<!-- Scripts -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.12.2/lottie.min.js"></script>
<script>
  // Lazy Load and control Lottie animations
  const faceLottieObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      const container = entry.target;
      if (entry.isIntersecting) {
        if (!container._lottie) {
          const anim = lottie.loadAnimation({
            container,
            renderer: 'svg',
            loop: true,
            autoplay: true,
            path: container.dataset.src
          });
          container._lottie = anim;
        } else {
          container._lottie.play();
        }
      } else {
        if (container._lottie) container._lottie.pause();
      }
    });
  }, { threshold: 0.4 });

  document.querySelectorAll('.face-lottie').forEach(container => {
    faceLottieObserver.observe(container);
  });

  // Drag to scroll
  const faceScrollContainer = document.getElementById('utya-scroll');
  let isDownFace = false, startXFace, scrollLeftFace;

  faceScrollContainer.addEventListener('mousedown', (e) => {
    isDownFace = true;
    faceScrollContainer.classList.add('dragging');
    startXFace = e.pageX - faceScrollContainer.offsetLeft;
    scrollLeftFace = faceScrollContainer.scrollLeft;
  });
  faceScrollContainer.addEventListener('mouseleave', () => {
    isDownFace = false;
    faceScrollContainer.classList.remove('dragging');
  });
  faceScrollContainer.addEventListener('mouseup', () => {
    isDownFace = false;
    faceScrollContainer.classList.remove('dragging');
  });
  faceScrollContainer.addEventListener('mousemove', (e) => {
    if (!isDownFace) return;
    e.preventDefault();
    const x = e.pageX - faceScrollContainer.offsetLeft;
    faceScrollContainer.scrollLeft = scrollLeftFace - (x - startXFace) * 1.5;
  });

  function isElementInMiddleView(el) {
    const rect = el.getBoundingClientRect();
    const middleY = window.innerHeight / 2;
    return rect.top < middleY && rect.bottom > middleY;
  }

  faceScrollContainer.addEventListener('wheel', function (e) {
    const isHorizontalMode = window.innerWidth >= 768;
    if (!isHorizontalMode) return;

    if (!isElementInMiddleView(faceScrollContainer)) return;

    // اگر هنوز وسط صفحه نیست، نذار اجرا بشه
    const atStart = faceScrollContainer.scrollLeft <= 0;
    const atEnd = faceScrollContainer.scrollLeft + faceScrollContainer.offsetWidth >= faceScrollContainer.scrollWidth - 1;

    // اگه به ابتدا یا انتها رسیده بود، اجازه بده اسکرول عمودی عادی انجام بشه
    const scrollingDown = e.deltaY > 0;
    if ((scrollingDown && atEnd) || (!scrollingDown && atStart)) {
      return;
    }

    // جلو اسکرول عمودی رو بگیر و اسکرول افقی انجام بده
    e.preventDefault();
    faceScrollContainer.scrollLeft += e.deltaY * 1.2;
  }, { passive: false });

</script>
