---
const {
  title = "UTYA",
  subtitle = "The Duck Everyone Knew, But No One Named",
} = Astro.props;
---
<section id="about">
  <div class="black-4-widget">
    <h2>{title}</h2>
    <div class="subtitle">{subtitle}</div>

    <div class="card">
      <div class="intro-lottie" data-src="/about-utya.json"></div>
      <div class="card-content">Who's Utya?</div>

<div class="utya-info">
  <div class="utya-info-text">
    Searched Telegram, got "no result"? Boom, Utya appears. That awkward silence... now with extra duck!
  </div>
  <div class="utya-lottie" data-src="/utya-searcher.json"></div>
</div>

   <div class="utya-info">
  <div class="utya-info-text">
    Clearing your Telegram storage? Utya pops in with a broom. Clean vibes only!
  </div>
  <div class="utya-lottie" data-src="/utya-cleaner.json"></div>
</div>

      <div class="utya-info">
        <div class="utya-info-text">
          Auto delete messages? Utya’s here with a hello note. Your chat assistant for fresh convos.
        </div>
        <div class="utya-lottie" data-src="/hello-utya.json"></div>
      </div>

      <div class="utya-info">
        <div class="utya-info-text">
          Lock your app? Utya guards your chats. Privacy secured, duck’s honor.
        </div>
        <div class="utya-lottie" data-src="/utya-lock.json"></div>
      </div>

 <div class="utya-info">
  <div class="utya-info-text">
    New to Telegram chats? Utya just popped up in your chat list. Fresh duck, fresh vibes!
  </div>
  <div class="utya-lottie" data-src="/utya-egg.json"></div>
</div>

      <div class="utya-info">
        <div class="utya-info-text">
          Inviting friends? Utya crashes the party! Your cue for fun times ahead.
        </div>
        <div class="utya-lottie" data-src="/utya-invite.json"></div>
      </div>
    </div>
  </div>
</section>

<style>
  .black-4-widget {
    max-width: 1200px;
    margin: 48px auto;
    color: rgba(255, 213, 39, 1);
    font-family: 'Fredoka One', cursive, sans-serif;
    text-align: center;
  }

  .black-4-widget h2 {
    font-size: 2rem;
    margin-bottom: 8px;
  }

  .black-4-widget .subtitle {
    font-size: 1.5rem;
    color: white;
    margin-bottom: 24px;
  }

  .card {
    background: linear-gradient(135deg, rgba(255,255,255,0.05), rgba(255,255,255,0.05));
    border: 1px solid rgba(255,255,255,0.2);
    border-radius: 16px;
    padding: 24px;
    backdrop-filter: blur(10px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    margin-top: 32px;
    text-align: left;
    user-select: none;
  }

  .card .intro-lottie {
    width: 100%;
    max-width: 600px;
    height: auto;
    margin: 0 auto 16px auto;
    border-radius: 16px;
  }

  .card-content {
    font-size: 1.5rem;
    font-weight: bold;
    line-height: 1.6;
    color: rgba(141, 82, 193, 1);
    text-align: center;
  }

  .utya-info {
    display: flex;
    align-items: center;
    gap: 24px;
    margin-top: 48px;
    max-width: 900px;
    margin-left: auto;
    margin-right: auto;
    text-align: left;
    font-size: 1.1rem;
    color: #eee;
  }

  .utya-info-text {
    flex: 1;
    font-family: 'Fredoka One', cursive, sans-serif;
    font-weight: 500;
  }

  .utya-lottie {
    width: 10rem;
    height: 10rem;
    border-radius: 16px;
  }

  @media (max-width: 768px) {
    .black-4-widget h2 {
      font-size: 1.5rem;
    }
    .utya-info {
      flex-direction: column;
      text-align: center;
    }
    .utya-lottie {
      width: 80%;
      max-width: 300px;
      height: auto;
      margin-bottom: 24px;
    }
  }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.10.2/lottie.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const lottieElements = document.querySelectorAll('.intro-lottie, .utya-lottie');

    lottieElements.forEach(el => {
      const path = el.getAttribute('data-src');
      let animation = null;

      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            if (!animation) {
              animation = lottie.loadAnimation({
                container: el,
                renderer: 'svg',
                loop: true,
                autoplay: true,
                path: path
              });
            } else {
              animation.play();
            }
          } else {
            if (animation) animation.pause();
          }
        });
      }, { threshold: 0.25 });

      observer.observe(el);
    });
  });
</script>
