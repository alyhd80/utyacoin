---
import Header from '../components/Header.astro';
import Block1Widget from '../components/block-1-widget.astro';
import Block2Widget from '../components/block-2-widget.astro';

import Block3Widget from '../components/block-3-widget.astro';
import Block4Widget from '../components/block-4-widget.astro';
import Block5Widget from '../components/block-5-widget.astro';
import Block6Widget from '../components/block-6-widget.astro';
import Block7Widget from '../components/block-7-widget.astro';
import Block8Widget from '../components/block-8-widget.astro';
import Block9Widget from '../components/block-9-widget.astro';
import Block10Widget from '../components/block-10-widget.astro';
import Block11Widget from '../components/block-11-widget.astro';
import Block12Widget from '../components/block-12-widget.astro';
import Block13Widget from '../components/block-13-widget.astro';

const blocks = [
  { id: 1, Component: Block1Widget },
  { id: 2, Component: Block2Widget },
  { id: 3, Component: Block3Widget },
  { id: 2, Component: Block2Widget },
  { id: 4, Component: Block4Widget },
  { id: 5, Component: Block5Widget },
  { id: 6, Component: Block6Widget },
  { id: 7, Component: Block7Widget },
  { id: 8, Component: Block8Widget },
  { id: 9, Component: Block9Widget },
  { id: 10, Component: Block10Widget }, 
  { id: 11, Component: Block11Widget },
  { id: 10, Component: Block10Widget }, 
  { id: 12, Component: Block12Widget }, 
  { id: 10, Component: Block10Widget }, 
  { id: 13, Component: Block13Widget }, 
];
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" href="/utya-logo.png" />
    <title>TON UTYA</title>
    <link href="https://fonts.googleapis.com/css2?family=Fredoka+One&display=swap" rel="stylesheet" />

    <style>
html, body {
  margin: 0;
  padding: 0;
  font-family: 'Fredoka One', cursive, sans-serif;
  overflow-x: hidden;
  background: transparent;
  min-height: 100%;
    user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

body {
  background-image: url('/utya-background.jpg');
  background-repeat: no-repeat;
  background-position: center top;
  background-size: cover;
  transition: background-image 1s ease-in-out;
}

body.background-alt {
  background-image: url('/utya-background-2.jpg');
}

      body::before {
        content: "";
        position: fixed;
        inset: 0;
        background: url('/utya-background.jpg') center/cover no-repeat;
        filter: blur(6px);
        z-index: -2;
        transition: background-image 1s ease-in-out;
      }

      body.background-alt::before {
        background-image: url('/utya-background-2.jpg');
      }

      body::after {
        content: "";
        position: fixed;
        inset: 0;
        background-color: rgba(0, 160, 217, 0.5);
        z-index: -1;
        transition: background-color 1s ease-in-out;
      }

      body.background-alt::after {
      }

      #loading {
        position: fixed;
        inset: 0;
        background-color: #0ca0d9;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 2000;
      }

      #loading-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
      }

      #lottie-loading {
        width: 200px;
        height: 200px;
      }

      #loading-content span {
        font-size: 4vw;
        color: white;
        font-weight: 600;
        text-align: center;
      }

      #content {
        opacity: 0;
        transform: translateY(10px);
        transition: opacity 0.7s ease, transform 0.7s ease;
        padding: 20px;
        min-height: 100vh;
        box-sizing: border-box;
        z-index: 1;
        position: relative;
        color: white;
      }

      #content.visible {
        opacity: 1;
        transform: translateY(0);
      }

      #main-header {
        opacity: 0;
        transition: opacity 0.7s ease;
        position: relative;
        z-index: 10;
      }

      #main-header.visible {
        opacity: 1;
      }

      @keyframes slideUpFadeOut {
        from {
          opacity: 1;
          transform: translateY(0);
        }
        to {
          opacity: 0;
          transform: translateY(-100%);
        }
      }

      #loading.animate-out {
        animation: slideUpFadeOut 0.7s forwards;
      }

      #ripple-canvas {
        position: fixed;
        inset: 0;
        z-index: 1000;
        pointer-events: none;
      }
    </style>
  </head>

  <body>
    <Header id="main-header" />

    <!-- Loading Screen -->
    <div id="loading">
      <div id="loading-content">
        <div id="lottie-loading"></div>
        <span>Loading the future of TON with UTYA...</span>
      </div>
    </div>

    <!-- Canvas Ripples -->
    <canvas id="ripple-canvas"></canvas>

    <!-- Main Content -->
    <div id="content">
      {
        blocks.map(({ id, Component }) => (
          <div data-block-id={id} key={id}>
            <Component />
          </div>
        ))
      }
    </div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.10.2/lottie.min.js"></script>

    <script type="module">
      const lottieLoading = lottie.loadAnimation({
        container: document.getElementById('lottie-loading'),
        renderer: 'svg',
        loop: true,
        autoplay: true,
        path: '/utya-welcome.json',
      });

      window.addEventListener('load', () => {
        const loading = document.getElementById('loading');
        const content = document.getElementById('content');
        const header = document.getElementById('main-header');

        setTimeout(() => {
          loading.classList.add('animate-out');
          loading.addEventListener('animationend', () => {
            loading.style.display = 'none';
            content.classList.add('visible');
            header.classList.add('visible');
            lottieLoading.destroy();
          }, { once: true });
        }, 0);
      });

      // Ripple effect
      const canvas = document.getElementById("ripple-canvas");
      const ctx = canvas.getContext("2d");
      const ripples = [];

      const resizeCanvas = () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
      };
      resizeCanvas();
      window.addEventListener("resize", resizeCanvas);

      let lastRipple = 0;
      const interval = 100;

      document.addEventListener("mousemove", (e) => {
        const now = Date.now();
        if (now - lastRipple > interval) {
          ripples.push({ x: e.clientX, y: e.clientY, radius: 0, alpha: 0.25 });
          lastRipple = now;
        }
      });

      function animateRipples() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        for (let i = ripples.length - 1; i >= 0; i--) {
          const r = ripples[i];
          r.radius += 1;
          r.alpha -= 0.002;
          if (r.alpha <= 0) {
            ripples.splice(i, 1);
          } else {
            ctx.beginPath();
            ctx.arc(r.x, r.y, r.radius, 0, Math.PI * 2);
            ctx.strokeStyle = `rgba(255, 255, 255, ${r.alpha})`;
            ctx.lineWidth = 1.2;
            ctx.stroke();
          }
        }
        requestAnimationFrame(animateRipples);
      }
      animateRipples();

      function observeBlocksManually() {
        const altBackgroundIds = [9, 10, 11,12,13,14];
        const allBlocks = document.querySelectorAll('[data-block-id]');
        const targetBlocks = Array.from(allBlocks).filter(el =>
          altBackgroundIds.includes(parseInt(el.dataset.blockId))
        );

        const visibleMap = new Map();

        const observer = new IntersectionObserver((entries) => {
          // به‌روزرسانی وضعیت هر بلاک
          entries.forEach(entry => {
            const id = parseInt(entry.target.dataset.blockId);
            visibleMap.set(id, entry.intersectionRatio > 0.5);
          });

          // بررسی کل وضعیت: آیا حداقل یکی از بلاک‌ها دیده میشه؟
          const anyVisible = Array.from(visibleMap.values()).some(Boolean);

          if (anyVisible) {
            document.body.classList.add('background-alt');
          } else {
            document.body.classList.remove('background-alt');
          }
        }, { threshold: [0, 0.5, 1] });

        targetBlocks.forEach(block => {
          visibleMap.set(parseInt(block.dataset.blockId), false); // مقدار اولیه false
          observer.observe(block);
        });
      }

      observeBlocksManually();

      // Disable right-click (Context menu) - Added as requested
      // document.addEventListener("contextmenu", (e) => {
      //   e.preventDefault();
      // });



      
    </script>
  </body>
</html>
