---
import Header from '../components/Header.astro';
import Block1Widget from '../components/block-1-widget.astro';
import Block2Widget from '../components/block-2-widget.astro';
import Block3Widget from '../components/block-3-widget.astro';
import Block4Widget from '../components/block-4-widget.astro';
import Block5Widget from '../components/block-5-widget.astro';
import Block6Widget from '../components/block-6-widget.astro';
import Block7Widget from '../components/block-7-widget.astro';
import Block8Widget from '../components/block-8-widget.astro';
import Block9Widget from '../components/block-9-widget.astro';
import Block10Widget from '../components/block-10-widget.astro';

const blocks = [
  { id: 1, Component: Block1Widget },
  { id: 2, Component: Block2Widget },
  { id: 3, Component: Block3Widget },
  { id: 4, Component: Block4Widget },
  { id: 5, Component: Block5Widget },
  { id: 6, Component: Block6Widget },
  { id: 7, Component: Block7Widget },
  { id: 8, Component: Block8Widget },
  { id: 9, Component: Block9Widget },
  { id: 10, Component: Block10Widget },
];
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" href="/utya-logo.png" type="image/x-icon" />
    <title>TON UTYA</title>
    <link href="https://fonts.googleapis.com/css2?family=Fredoka+One&display=swap" rel="stylesheet" />
    <style>
      html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        font-family: 'Fredoka One', cursive, sans-serif;
        overflow-x: hidden;
        background: transparent;
      }

      body::before {
        content: "";
        position: fixed;
        inset: 0;
        background: url('/utya-background.jpg') no-repeat center center;
        background-size: cover;
        filter: blur(6px);
        z-index: -2;
        transition: background-image 1s ease-in-out;
      }

      body.background-alt::before {
        background-image: url('/utya-background-2.jpg');
      }

      body::after {
        content: "";
        position: fixed;
        inset: 0;
        background-color: rgba(0, 160, 217, 0.5);
        z-index: -1;
        transition: background-color 1s ease-in-out;
      }

      body.background-alt::after {
        background-color: rgba(0, 80, 140, 0.4);
      }

      #loading {
        position: fixed;
        inset: 0;
        background-color: #0ca0d9;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 2000;
      }

      #loading-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
      }

      #loading-content #lottie-loading {
        width: 200px;
        height: 200px;
        margin: 0 auto;
      }

      #loading-content span {
        font-size: 4vw;
        font-weight: 600;
        color: white;
        white-space: nowrap;
        text-align: center;
      }

      #content {
        position: relative;
        z-index: 1;
        opacity: 0;
        transform: translateY(10px);
        transition: opacity 0.7s ease, transform 0.7s ease;
        font-size: 48px;
        color: white;
        padding: 20px;
        min-height: 100vh;
        box-sizing: border-box;
      }

      #content.visible {
        opacity: 1;
        transform: translateY(0);
      }

      #main-header {
        position: relative;
        z-index: 10;
        opacity: 0;
        transition: opacity 0.7s ease;
      }

      #main-header.visible {
        opacity: 1;
      }

      @keyframes slideUpFadeOut {
        0% {
          opacity: 1;
          transform: translateY(0);
        }
        100% {
          opacity: 0;
          transform: translateY(-100%);
        }
      }

      #loading.animate-out {
        animation: slideUpFadeOut 0.7s forwards;
      }

      #ripple-canvas {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1000;
        pointer-events: none;
        width: 100%;
        height: 100%;
      }
    </style>
  </head>
  <body>
    <Header id="main-header" />

    <div id="loading">
      <div id="loading-content">
        <div id="lottie-loading"></div>
        <span>Loading the future of TON with UTYA...</span>
      </div>
    </div>

    <canvas id="ripple-canvas"></canvas>

    <div id="content">
      {
        blocks.map(({ id, Component }) => (
          <div data-block-id={id} key={id}>
            <Component />
          </div>
        ))
      }
    </div>

    <!-- Lottie JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.10.2/lottie.min.js"></script>

    <script type="module">
      // Load Lottie animation for loading screen
      const lottieLoadingContainer = document.getElementById('lottie-loading');
      const loadingAnimation = lottie.loadAnimation({
        container: lottieLoadingContainer,
        renderer: 'svg',
        loop: true,
        autoplay: true,
        path: '/utya-welcome.json', // مسیر فایل JSON انیمیشن
      });

      window.addEventListener("load", () => {
        const loading = document.getElementById("loading");
        const content = document.getElementById("content");
        const header = document.getElementById("main-header");

        setTimeout(() => {
          loading.classList.add("animate-out");
          loading.addEventListener(
            "animationend",
            () => {
              loading.style.display = "none";
              content.classList.add("visible");
              header.classList.add("visible");
              loadingAnimation.destroy(); // پاک کردن انیمیشن لودینگ
            },
            { once: true }
          );
        }, 0);
      });

      const canvas = document.getElementById("ripple-canvas");
      const ctx = canvas.getContext("2d");
      const ripples = [];

      function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
      }

      resizeCanvas();
      window.addEventListener("resize", resizeCanvas);

      let lastRippleTime = 0;
      const rippleInterval = 100;

      document.addEventListener("mousemove", (e) => {
        const now = Date.now();
        if (now - lastRippleTime > rippleInterval) {
          ripples.push({ x: e.clientX, y: e.clientY, radius: 0, alpha: 0.25 });
          lastRippleTime = now;
        }
      });

      function animateRipples() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        for (let i = ripples.length - 1; i >= 0; i--) {
          const r = ripples[i];
          r.radius += 1;
          r.alpha -= 0.002;

          if (r.alpha <= 0) {
            ripples.splice(i, 1);
          } else {
            ctx.beginPath();
            ctx.arc(r.x, r.y, r.radius, 0, Math.PI * 2);
            ctx.strokeStyle = `rgba(255, 255, 255, ${r.alpha})`;
            ctx.lineWidth = 1.2;
            ctx.stroke();
          }
        }

        requestAnimationFrame(animateRipples);
      }

      animateRipples();

      document.addEventListener("contextmenu", (e) => e.preventDefault());

      function observeBlock9() {
        const block9 = document.querySelector('[data-block-id="9"]');
        if (!block9) return;

        const observer = new IntersectionObserver(
          (entries) => {
            const entry = entries[0];
            if (entry.isIntersecting) {
              document.body.classList.add('background-alt');
            } else {
              document.body.classList.remove('background-alt');
            }
          },
          { threshold: 0.5 }
        );

        observer.observe(block9);
      }
      observeBlock9();
    </script>
  </body>
</html>
