---
import Header from '../components/Header.astro';
import Block from '../components/Block.astro';
import Block1Widget from '../components/block-1-widget.astro';



const blocks = [
  { id: 1, Component: Block1Widget },

];
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" href="/utya-logo.png" type="image/x-icon" />
    <title>TON UTYA</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Fredoka+One&display=swap"
      rel="stylesheet"
    />
    <style>
html, body {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  font-family: 'Fredoka One', cursive, sans-serif;
  position: relative;
  z-index: 0;
  overflow-x: hidden;
}

body::before {
  content: "";
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: url('/utya-background.jpg') no-repeat center center;
  background-size: cover;
  filter: blur(6px);
  z-index: -2;
}

body::after {
  content: "";
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(0, 160, 217, 0.5); 
  z-index: -1;
}

      #loading {
        position: fixed;
        inset: 0;
        background-color: #0ca0d9;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 2000;
      }

      #loading-content {
        display: flex;
        align-items: center;
        gap: 20px;
      }

      #loading-content img {
        width: 200px;
        height: auto;
      }

      #loading-content span {
        font-size: 24px;
        font-weight: 600;
        color: white;
        white-space: nowrap;
      }

      #content {
        position: relative;
        z-index: 1;
        opacity: 1;
        transform: translateY(0);
        transition: opacity 0.7s ease, transform 0.7s ease;
        font-size: 48px;
        color: white;
        padding: 20px 20px 20px 20px;
        min-height: 100vh;
        box-sizing: border-box;
      }

      #content.visible {
        opacity: 1;
        transform: translateY(0);
      }

      @keyframes slideUpFadeOut {
        0% {
          opacity: 1;
          transform: translateY(0);
        }
        100% {
          opacity: 0;
          transform: translateY(-100%);
        }
      }

      #loading.animate-out {
        animation: slideUpFadeOut 0.7s forwards;
      }

      #ripple-canvas {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1000;
        pointer-events: none;
        width: 100%;
        height: 100%;
      }
    </style>
  </head>
  <body>
    <Header id="main-header" />

    <div id="loading">
      <div id="loading-content">
        <img src="utya-welcome.gif" alt="Loading..." />
        <span>Loading the future of TON with UTYA...</span>
      </div>
    </div>

    <canvas id="ripple-canvas"></canvas>

    <div id="content">
      {blocks.map(({ id, Component }) => (
        <Component key={id} />
      ))}
    </div>

    <script type="module">
      window.addEventListener("load", () => {
        const loading = document.getElementById("loading");
        const content = document.getElementById("content");
        const header = document.getElementById("main-header");

        setTimeout(() => {
          loading.classList.add("animate-out");

          loading.addEventListener(
            "animationend",
            () => {
              loading.style.display = "none";
              content.classList.add("visible");
              header.classList.add("visible");

          
            },
            { once: true }
          );
        }, 2000);
      });

      // ðŸŽ¯ Ripple canvas animation
      const canvas = document.getElementById("ripple-canvas");
      if (!(canvas instanceof HTMLCanvasElement))
        throw new Error("Canvas element not found");

      const ctx = canvas.getContext("2d");
      if (!ctx) throw new Error("2D context not supported");

      const ripples = [];

      function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
      }

      resizeCanvas();
      window.addEventListener("resize", resizeCanvas);

      let lastRippleTime = 0;
      const rippleInterval = 100;

      document.addEventListener("mousemove", (e) => {
        const now = Date.now();
        if (now - lastRippleTime > rippleInterval) {
          ripples.push({
            x: e.clientX,
            y: e.clientY,
            radius: 0,
            alpha: 0.25,
          });
          lastRippleTime = now;
        }
      });

      function animate() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        for (let i = ripples.length - 1; i >= 0; i--) {
          const r = ripples[i];
          r.radius += 1;
          r.alpha -= 0.002;

          if (r.alpha <= 0) {
            ripples.splice(i, 1);
          } else {
            ctx.beginPath();
            ctx.arc(r.x, r.y, r.radius, 0, Math.PI * 2);
            ctx.strokeStyle = `rgba(255, 255, 255, ${r.alpha})`;
            ctx.lineWidth = 1.2;
            ctx.stroke();
          }
        }

        requestAnimationFrame(animate);
      }

      animate();
    </script>
  </body>
</html>
